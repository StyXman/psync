#! /usr/bin/env python
# -*- coding: utf-8 -*-
# (c) 2004-2011
# Marcos Dione <mdione@grulic.org.ar>
# Marcelo "xanthus" Ramos <mramos@adinet.com.uy>

from tempfile import mkdtemp
from optparse import OptionParser
from socket import getfqdn
from traceback import print_exc
import sys
import smtplib
import datetime
import errno

import psync
from psync import status

from psync import logLevel
import logging
logger = logging.getLogger('psync')
logger.setLevel(logLevel)

def confToDict (conf):
    d= {}
    # this kinda sucks
    for attr in dir (conf):
        if not attr in ('__doc__', '__init__', '__module__', '__repr__',
                        '_update', '_update_careful', '_update_loose',
                        'read_file', 'ensure_value', 'read_module'):
            d[attr]= getattr (conf, attr)

    return d

def handleOpts ():
    parser= OptionParser ()

    # parser.add_option ('-c', '--continue', action='store_true', dest='cont', default=False,
    #     help=u"Continue processing the databases instead of donwloading new ones. Tries to use temp ones first; if they don't exist, tries the actual ones.")
    parser.add_option ('-d', '--debug', action='store_const', dest='log_level',
        const=logging.DEBUG, help=u"Be *very* verbose on what's being done.")
    parser.add_option ('-f', '--config-file', default='psync.conf.py',
        help=u"Process this config file instead of psync.conf.py in the current dir.")
    # parser.add_option ('-j', '--subject', default='Updates del día %(date)s',
    #     help="The subject of the mail sent.")
    parser.add_option ('-l', '--limit', type='int', default=0,
        help=u"Limit the bandwidth used to n KiB/s.")
    # parser.add_option ('-m', '--mail-to',
    #     help="Send a summary mail to this email account. If not specified, the summary is printed on stdout.")
    parser.add_option ('-n', '--dry-run', action='store_true', default=False,
        help=u"Do a dry run: download databases, process them, but don't download any package. It does the summary. Usefull for foreseeing how much it will download.")
    # BUG: -o deletes the databases!
    parser.add_option ('-o', '--process-old', action='store_true', default=False,
        help=u"Process databases already downloaded. Mostly for debug purposses.")
    parser.add_option ('-p', '--progress', action='store_true', default=False,
        help=u"Show a progress when downloading anything. Not suitable for non interactive running (e.g., from a cron job).")
    parser.add_option ('-q', '--quiet', action='store_false', default=False,
        help=u"Shh! Don't say anything!")
    parser.add_option ('-r', '--repo', action='append', dest='repos',
        help=u"A repo name to be processed. you can specify any number of them. if none specified, all repos defined in the config file will be processed.")
    # parser.add_option ('-s', '--save-space', action='store_true',
        # dest='save_space', default=False, help="Do not maintain consistency, saving space.")
    parser.add_option ('-s', '--size', action='store_true', dest='showSize', default=False,
        help=u"Calculates the final size of the repos from the new databases.")
    parser.add_option ('-t', '--consistent', action='store_false',
        dest=u'save_space', default=False, help="Maintain consistency, wasting temporarily space.")
    parser.add_option ('-v', '--verbose', action='store_const', dest='log_level',
        const=logging.WARN, help=u"Be verbose on what's being done.")
    parser.add_option ('-w', '--wipe', action='store_true', dest='wipe',
        help=u"Run the clean part, deleting unneeded files.")
    parser.add_option ('-x', '--experiment', action='store_true', default=False,
        help=u"Don't really download the files, just «touch» them. Faster for test.")
    parser.add_option ('-y', '--download-databases', action='store_true', dest='download_db',
        help=u"Force to download new datbases, even if it wouldn't.")
    parser.add_option ('-z', '--status-file', dest='status_file', default='status.html',
        help=u"Filename of the HTML file where the mirror status will be written to.")
    return parser.parse_args ()

def main ():
    (opts, args)= handleOpts ()
    opts.debugging= opts.log_level==logging.DEBUG
    opts.verbose= opts.log_level==logging.WARN or opts.debugging
    psync.logLevel= opts.log_level
    if opts.showSize:
        print "sizes in MiB"
        psync.logLevel= logging.WARN

    # load config file
    configVars= {}
    execfile(opts.config_file, configVars)
    config= configVars['config']
    del configVars

    if opts.repos is not None:
        repos= []
        for repo in config:
            repoName= repo['repo']
            if repoName in opts.repos:
                repos.append (repo)
                opts.repos.remove (repoName)
        if opts.repos != []:
            logger.warn ("%s: these repos were not found. not processing." % opts.repos)
    else:
        repos= config

    if opts.dry_run:
        logger.info ("doing dry run!")
    try:
        for repo in repos:
            repo.update (confToDict (opts))

            driverName= repo['driver']

            # instantiate a driver and process it
            DriverClass= getattr(__import__('psync.drivers.'+driverName, {},
                                 {}, [driverName]), driverName)
            driver= DriverClass(**repo)
            try:
                driver.processRepo ()
                if driver.size:
                    # in MiB
                    print u"%10.2f %s" % (driver.repo, driver.repoSize)
            except Exception, e:
                if ( opts.debugging or
                    (isinstance (e, IOError) and e.errno==errno.ENOSPC) or
                    isinstance (e, KeyboardInterrupt) ):
                    # debugging, out of disk space or keyb int
                    print_exc ()
                    raise e
            print ""


    except KeyboardInterrupt:
        # curl stays always in the same line
        print

    if not opts.dry_run and not opts.experiment:
        status.writeStatusFile (opts.status_file, config)


if __name__=='__main__':
    main ()

# end
